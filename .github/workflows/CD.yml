name: CD

on:
  push:
    tags:
      - '**'
env:
  PYTHON_PACKAGE_ARTIFACT: python-package
  CONDA_PACKAGE_ARTIFACT: conda-package

jobs:
  test:
    name: Run tests
    uses: ./.github/workflows/pytest.yml

  get-package-name:
    name: Get package name
    runs-on: ubuntu-latest
    outputs:
      package-name: ${{ steps.get-package-name.outputs.package-name }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
      
      - name: Get name
        id: get-package-name
        run: |
          echo "package-name=$(yq '.project.name' pyproject.toml)" >> $GITHUB_OUTPUT
  
  build_python_wheel:
    name: Build Python package
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-tags: true
          fetch-depth: 0

      - uses: actions/setup-python@v5

      - name: Install build dependencies
        run: python -m pip install build twine

      - name: Build distributions
        run: |
          git clean -xfd
          pyproject-build

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PYTHON_PACKAGE_ARTIFACT }}
          path: dist/

  publish-pypi-package:
    name: Publish package to PyPI
    runs-on: ubuntu-latest
    needs: build_python_wheel
    permissions:
      id-token: write
    steps:
      - name: Download artifact
        id: download-artifact
        uses: actions/download-artifact@v5
        with:
          name: ${{ env.PYTHON_PACKAGE_ARTIFACT }}
          path: dist/

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0

  publish-conda-package:
    name: Publish package to Anaconda.org
    runs-on: ubuntu-latest
    needs: build_python_wheel
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        id: download-artifact
        uses: actions/download-artifact@v5
        with:
          name: ${{ env.PYTHON_PACKAGE_ARTIFACT }}
      
      # We need the tarball path to be used within the conda recipe
      # So, we get its path and set it as environment variable
      - name: Set tarball path env variable
        run: |
          TAR_PATH=$(find ${{ steps.download-artifact.outputs.download-path }} -type f -name "*.tar.gz" | head -n 1)
          echo "TARBALL_PATH=$TAR_PATH" >> $GITHUB_ENV
          echo $TAR_PATH # TODO: remove this line

      - name: Set up micromamba
        uses: mamba-org/setup-micromamba@v2
        with:
          environment-name: build-env
          create-args: >-
            conda-build
            anaconda-client
            versioneer
      
      - name: Publish package to Anaconda.org
        id: publish-conda-package
        uses: ACCESS-NRI/action-build-and-upload-conda-packages@v3.0.0
        with:
          meta_yaml_dir: conda
          user: ${{ secrets.ANACONDA_USERNAME }}
          token: ${{ secrets.ANACONDA_TOKEN }}
     
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CONDA_PACKAGE_ARTIFACT }}
          path: |
            ${{ steps.publish-conda-package.outputs.paths }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [get-package-name, publish-pypi-package, publish-conda-package]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v5

      - name: Create Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 #v2.3.3
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{needs.get-package-name.outputs.package-name}} ${{ github.ref_name }}
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            ${{ env.PYTHON_PACKAGE_ARTIFACT }}/*
            ${{ env.CONDA_PACKAGE_ARTIFACT }}/*
    
  cleanup-on-failure:
    name: Cleanup on failure
    runs-on: ubuntu-latest
    needs: create-github-release
    # Run this job if any of the previous jobs failed (and don't skip if any of the needed jobs is skipped)
    if: ${{ ( always() && failure() ) || cancelled() }}
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0 
      
      # Delete newly created tag
      - name: Cleanup tag
        run: |
          git push origin ':${{ github.ref }}'
          echo "A job in the current workflow failed. Tag '${{ github.ref }}' was deleted."
      
      # Delete newly created GitHub release
      - name: Cleanup GitHub release
        run: |
           gh release delete '${{ github.ref_name }}' && echo "GitHub release was deleted." || echo "No GitHub release '${{ github.ref_name }}' to delete."